'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jvent = require('jvent');

var _jvent2 = _interopRequireDefault(_jvent);

var _canvasUtils = require('./canvas-utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @constructor
 * @param {Element} target - the canvas that should emit the events
 * @param {Element} eventSource - defaults to window.document
 */
var createCanvasEventEmitter = function createCanvasEventEmitter(target) {
  var eventSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.document;

  var isIn = false;
  var emitter = new _jvent2.default()
  /**
   * Get the coordinates of an event relative to
   * the target element
   * @param {MouseEvent} event - DOM event
   * @return {Object} the converted coordinate as object {x,y}
   */
  ,
      getCoords = function getCoords(event) {
    return (0, _canvasUtils.convertEventCoords)(event, target);
  }

  /**
   * Calculate if the coordinates (as given by getCoords)
   * are on the canvas
   * @param {Object} xy - object with the x and y coordinates
   * @return {Boolean} true if on canvas else false
   */
  ,
      areCoordsOnCanvas = function areCoordsOnCanvas(xy) {
    var x = xy.x,
        y = xy.y,
        width = target.width,
        height = target.height;


    if (x < 0 || y < 0) {
      return false;
    }

    if (x > width || y > height) {
      return false;
    }

    return true;
  }

  /**
   * Wraps the DOM event into a CanvasEventEmitter event and emits it.
   * @param {Event} event - the DOM event
   * @param {Object} xy - the coordinate to emit
   * @param {string} type - optional defaults to event.type
   *
   * @return {undefined}
   */
  ,
      emitCanvasEventRaw = function emitCanvasEventRaw(event, xy) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : event.type;
    var x = xy.x,
        y = xy.y;


    emitter.emit(type, { x: x,
      y: y,
      target: target,
      event: event,
      button: event.button,
      preventDefault: function preventDefault() {
        return event.preventDefault();
      }
    });
  }

  /**
   * Emits the given DOM Event if the coordinates are on the canvas
   * @param {Event} event - the DOM event
   * @param {string} overrideType - optional defaults to event.type
   * @return {undefined}
   */
  ,
      emitCanvasEventIfOnCanvas = function emitCanvasEventIfOnCanvas(event, overrideType) {
    var xy = getCoords(event);

    if (!areCoordsOnCanvas(xy)) {
      return;
    }

    emitCanvasEventRaw(event, xy, overrideType);
  }

  /**
   * Attaches the DOM listeners
   * Should only be called once
   * @return {undefined}
   */
  ,
      initListeners = function initListeners() {
    //add the basic listeners to the dom
    ['mousedown', 'mouseup'].forEach(function (eventType) {
      eventSource.addEventListener(eventType, emitCanvasEventIfOnCanvas);
    });

    //Add listener for mousemove
    //We calculate mouseover and mouseout from this
    eventSource.addEventListener('mousemove', function (event) {

      var xy = getCoords(event),
          onCanvas = areCoordsOnCanvas(xy);

      if (onCanvas) {
        //Emit the standard mousemove event
        emitCanvasEventRaw(event, xy);
      }

      //Emit mouseover and mouseout
      if (onCanvas && !isIn) {
        isIn = true;
        emitCanvasEventRaw(event, xy, 'mouseover');
        emitCanvasEventRaw(event, xy, 'mousein');
      }

      if (!onCanvas && isIn) {
        isIn = false;
        emitCanvasEventRaw(event, xy, 'mouseout');
        emitCanvasEventRaw(event, xy, 'mouseleave');
      }
    });

    //Listener for contextmenu. also trigers the click event
    eventSource.addEventListener('contextmenu', function (event) {
      emitCanvasEventIfOnCanvas(event);
      emitCanvasEventIfOnCanvas(event, 'rightclick');
      emitCanvasEventIfOnCanvas(event, 'click');
    });

    eventSource.addEventListener('click', function (event) {
      emitCanvasEventIfOnCanvas(event);
      if (event.button == 0) {
        emitCanvasEventIfOnCanvas(event, 'leftclick');
      }
    });
  };

  initListeners();
  return emitter;
};

exports.default = createCanvasEventEmitter;