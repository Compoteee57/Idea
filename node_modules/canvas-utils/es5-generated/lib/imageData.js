'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.fromImage = fromImage;
exports.fromCanvas = fromCanvas;
exports.fromContext = fromContext;
exports.fromImageData = fromImageData;

var _canvasUtils = require('./canvas-utils');

function fromImage(img) {
  var width = img.width,
      height = img.height,
      canvas = (0, _canvasUtils.createCanvas)(width, height),
      ctx = canvas.getContext('2d');


  ctx.drawImage(img, 0, 0, width, height);

  return fromContext(ctx, width, height);
}

function fromCanvas(canvas) {
  var ctx = canvas.getContext('2d'),
      width = canvas.width,
      height = canvas.height;


  return fromContext(ctx, width, height);
}

function fromContext(ctx, width, height) {
  return fromImageData(ctx.getImageData(0, 0, width, height));
}

function fromImageData(imageData) {
  return imageDataHelper(imageData);
}

function imageDataHelper(imageData) {
  var width = imageData.width,
      height = imageData.height,
      array = imageData.data;


  function get(x, y) {
    var first = (y * width + x) * 4,
        r = array[first],
        g = array[first + 1],
        b = array[first + 2],
        a = array[first + 3];

    //we want != here (and NOT !==) because undefined == null
    return [r, g, b, a];
  }

  function set(x, y, _ref) {
    var _ref2 = _slicedToArray(_ref, 4),
        r = _ref2[0],
        g = _ref2[1],
        b = _ref2[2],
        _ref2$ = _ref2[3],
        a = _ref2$ === undefined ? 255 : _ref2$;

    var first = (y * width + x) * 4;

    array[first] = r;
    array[first + 1] = g;
    array[first + 2] = b;
    array[first + 3] = a;
  }

  function map(fn) {
    forEach(function (rgb, i, _ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          x = _ref4[0],
          y = _ref4[1];

      return set(x, y, fn(rgb, i, [x, y]));
    });
  }

  function forEach(fn) {
    for (var i = 0; i < array.length; i += 4) {
      var x = i / 4 % width,
          y = Math.floor(i / 4 / width);
      fn(get(x, y), i, [x, y]);
    }
  }

  function putImageData(ctx) {
    ctx.putImageData(imageData, 0, 0);
  }

  function createNewSameSize() {
    return imageDataHelper(new ImageData(width, height));
  }

  function toImage() {
    var canvas = (0, _canvasUtils.createCanvas)(width, height),
        ctx = canvas.getContext('2d');

    putImageData(ctx);
    return (0, _canvasUtils.canvasToImage)(canvas);
  }

  function clone() {
    var clone = (0, _canvasUtils.cloneImageData)(imageData);
    return imageDataHelper(clone);
  }

  return Object.freeze({ map: map,
    clone: clone,
    get: get,
    set: set,
    putImageData: putImageData,
    forEach: forEach,
    createNewSameSize: createNewSameSize,
    toImage: toImage,
    getImageData: function getImageData() {
      return imageData;
    },
    getWidth: function getWidth() {
      return width;
    },
    getHeight: function getHeight() {
      return height;
    }
  });
}